{"version":3,"sources":["BoardManager.js","Cell.js","Gameboard.js","Move.js","Player.js","Repository.js","ScoreKeeper.js","othello.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","BoardManager","this","value","row","col","gameBoard","isValidMove","rows","Array","concat","apply","getFlatGameBoard","filter","c","player","playerNumber","cell","above","tryGetCell","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","forEach","isTarget","Gameboard","initialPlayer","cellIsTarget","r","push","Cell","players","moves","Move","points","playerId","isHighestScoring","pointValue","time","timeInMatch","distance","highestScoring","Player","num","number","score","Repository","snapshots","data","snapshot","getSnapshotPattern","console","log","snapShots","gameboard","reduce","pattern","move","x","y","wasHighestScoring","ScoreKeeper","boardManager","initialRow","initialCol","hits","searchAt","Math","abs","initialCell","rowInc","colInc","getScore","_x","_x2","_again","result","undefined","self","checkCell","isEmpty","isPoint","cells","valid","empty","point","calculatePoints","_this","nextMoves","opponent","resetTargetCells","opponentsCells","getPlayerCells","adjacentCells","getOpenAdjacentCells","ac","pointsEarned","setScoreForMove","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","isArray","getPotentialNextMovesForNextPlayer","flatGamBoard","_boardManager","activePlayerCells","_activePlayer","potentialNextMoves","scoreMove","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","_scoreKeeper","isHit","_moveEarnsPoints","_moveEarnsPoints2","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","$playerSoreBoard","$","getScoreForPlayer","html","addClass","removeClass","otherPlayerIndex","_playerOne","_playerTwo","getInitialGameboard","renderGameBoard","j","on","$cell","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["\r\nclass BoardManager {\r\n\r\n    tryGetCell( row, col, gameBoard ) {\r\n        return this.isValidMove( row, col ) ?\r\n            gameBoard.rows[row][col] :\r\n            null;\r\n    }\r\n\r\n    isValidMove( row, col ) {\r\n        return ( row > -1 && col > -1 ) && ( row < 8 && col < 8 );\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard )\r\n            .filter( c  => c.player === 0 );\r\n    }\r\n\r\n    getPlayerCells( playerNumber, gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard )\r\n            .filter( c => c.player === playerNumber );\r\n    }\r\n\r\n    getOpenAdjacentCells( cell, gameBoard ) {\r\n        const above = this.tryGetCell( cell.row - 1, cell.col, gameBoard );\r\n        const aboveRight = this.tryGetCell( cell.row - 1, cell.col + 1, gameBoard );\r\n        const aboveLeft = this.tryGetCell( cell.row - 1, cell.col - 1, gameBoard );\r\n        const left = this.tryGetCell( cell.row, cell.col -1, gameBoard );\r\n        const right = this.tryGetCell( cell.row, cell.col + 1, gameBoard );\r\n        const below = this.tryGetCell( cell.row + 1, cell.col, gameBoard );\r\n        const belowRight = this.tryGetCell( cell.row + 1, cell.col + 1, gameBoard );\r\n        const belowLeft = this.tryGetCell( cell.row + 1, cell.col - 1, gameBoard );\r\n\r\n        return [above, aboveRight, aboveLeft, left, right, below, belowRight, belowLeft]\r\n            .filter( c => c !== null && c.player === 0 );\r\n    }\r\n\r\n    resetTargetCells( gameBoard ) {\r\n        this.getFlatGameBoard( gameBoard )\r\n            .forEach( c => c.isTarget = false );\r\n    }\r\n\r\n    getInitialGameboard() {\r\n        const gameBoard = new Gameboard();\r\n\r\n        let initialPlayer = ( row, col ) => {\r\n\r\n            if ( ( row === 3 && col === 3 ) || ( row === 4 && col === 4 ) )\r\n                return 1;\r\n\r\n            if ( ( row === 3 && col === 4 ) || ( row === 4 && col === 3 ) )\r\n                return 2;\r\n\r\n            return 0;\r\n\r\n        };\r\n\r\n        let cellIsTarget = ( row, col ) => {\r\n            return ( row === 2 && col === 4 ) ||\r\n            ( row === 3 && col === 5 ) ||\r\n            ( row === 4 && col === 2 ) ||\r\n            ( row === 5 && col === 3 );\r\n        };\r\n\r\n        for ( let r = 0; r < 8; r++ ) {\r\n            const row = [];\r\n            for ( let c = 0; c < 8; c++ )\r\n                row.push( new Cell( r, c, initialPlayer( r, c ), cellIsTarget( r, c ) ) );\r\n\r\n            gameBoard.rows.push( row );\r\n        }\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n\r\n\r\n}\r\n","\r\nclass Cell {\r\n\r\n    constructor( row, col, player, isTarget ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = player;\r\n        this.isTarget = isTarget;\r\n    }\r\n}","class Gameboard {\r\n\r\n    constructor(players) {\r\n        this.rows = [];\r\n        this.moves = [];\r\n        this.players = players;\r\n    }\r\n\r\n}","class Move {\r\n\r\n    constructor( row, col, points, playerId, isHighestScoring ) {\r\n        this.col = col;\r\n        this.row = row;\r\n        this.pointValue = points;\r\n        this.player = playerId;\r\n        this.time = 0;\r\n        this.timeInMatch = 0;\r\n        this.distance = 0;\r\n        this.highestScoring = isHighestScoring;\r\n    }\r\n}","\r\nclass Player {\r\n\r\n    constructor( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}","class Repository {\r\n    \r\n    constructor() {\r\n        this.snapshots = [];\r\n    }\r\n\r\n    recordMove( data ) {\r\n        let snapshot = this.getSnapshotPattern( data.gameBoard );\r\n        console.log( \"Snapshot created: \", snapshot );\r\n\r\n        this.snapshots.push( snapshot );\r\n        data.snapShots = this.snapshots;\r\n        console.log( \"Saving Data: \", data );\r\n    }\r\n\r\n    getSnapshotPattern( gameboard ) {\r\n        return gameboard.moves.reduce( ( pattern, move ) => {\r\n            return pattern + `${move.x}-${move.y}-${move.player}-${ +move.wasHighestScoring || 0},`;\r\n        }, \"\" );\r\n    }\r\n}\r\n\r\n","\r\nclass ScoreKeeper {\r\n\r\n    constructor( boardManager ) {\r\n        this.boardManager = boardManager;\r\n    }\r\n\r\n    setScoreForMove( initialRow, initialCol, player, gameBoard ) {\r\n        let hits = [];\r\n\r\n        for ( let row = -1 ; row <= 1; row++ )\r\n            for ( let col = -1 ; col <= 1; col++ )\r\n                if ( row === 0 && col === 0 )\r\n                    continue;\r\n                else\r\n                    hits = hits.concat( this.searchAt( initialRow, initialCol, row, col, player, gameBoard ) );\r\n\r\n        return hits;\r\n    }\r\n\r\n    setHitDistance( move, col, row ) {\r\n        move.distance = Math.abs( col - move.col ) + Math.abs( row - move.row );\r\n    }\r\n\r\n    calculatePoints( initialCell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [];\r\n        const self = this;\r\n\r\n        function getScore( r, c ) {\r\n            let cell = self.boardManager.tryGetCell( r, c, gameBoard );\r\n\r\n            if ( cell === null )\r\n                return [];\r\n\r\n            const result = self.checkCell( cell, player );\r\n\r\n            if ( !result.isValidMove || result.isEmpty ) {\r\n                return [];\r\n            } else if ( result.isPoint ) {\r\n                //self.setHitDistance( cell, r, c );\r\n                cell.player = player;\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( initialCell.row, initialCell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        var valid = this.boardManager.isValidMove( cell.row, cell.col ),\r\n              empty = valid ? cell.player === 0 : false,\r\n              point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.boardManager.getFlatGameBoard( gameBoard )\r\n            .reduce(( score, cell ) => {\r\n                if ( cell.player === playerNumber )\r\n                    score++;\r\n\r\n                return score;\r\n            }, 0 );\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.boardManager.getFlatGameBoard( gameBoard )\r\n            .forEach( cell  => cell.isHighestScoring = false );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchAt( row, col, rowInc, colInc, player, gameBoard ) {\r\n        const cell = this.boardManager.tryGetCell( row + rowInc, col + colInc, gameBoard );\r\n        return cell !== null ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n    nextMovesForPlayer( player, gameBoard ) {\r\n        const _this = this;\r\n        var nextMoves = [];\r\n        let opponent = player === 1 ? 2 : 1;\r\n\r\n        _this.boardManager.resetTargetCells( gameBoard );\r\n\r\n        let opponentsCells = _this.boardManager.getPlayerCells( opponent, gameBoard );\r\n\r\n        //console.log( opponentsCells );\r\n        \r\n        opponentsCells.forEach( c => {\r\n                let adjacentCells = _this.boardManager.getOpenAdjacentCells( c, gameBoard );\r\n                \r\n                console.log( adjacentCells );\r\n\r\n                adjacentCells.forEach( ac => {\r\n\r\n                    let pointsEarned = _this.setScoreForMove( ac.row, ac.col, player, gameBoard );\r\n\r\n                    if ( pointsEarned.length ) {\r\n                        ac.isTarget = true;\r\n                        ac.pointValue = pointsEarned.length;\r\n                        console.log( \"Adding - \", ac );\r\n                        nextMoves.push( ac );\r\n\r\n                    }\r\n                } );\r\n\r\n            } );\r\n\r\n        return nextMoves;\r\n    }\r\n\r\n}\r\n","/// <reference path=\"../../typings/jquery/jquery.d.ts\" />\r\n\r\n(() => {\r\n    const _playerOne = new Player( 1 );\r\n    const _playerTwo = new Player( 2 );\r\n    let _activePlayer = _playerOne;\r\n    const _players = [ _playerOne, _playerTwo ];\r\n    const _boardManager = new BoardManager();\r\n    const gameBoard = _boardManager.getInitialGameboard();\r\n    const _scoreKeeper = new ScoreKeeper( _boardManager );\r\n    \r\n    let renderGameBoard = () => {\r\n        let html = \"\";\r\n        gameBoard.rows.forEach( ( row, i ) => {\r\n            row.forEach( ( cell, j ) => {\r\n                html += `<div class='cell' title='${cell.distance}' data-target=\"${cell.isTarget}\" data-is-highest-scoring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    };\r\n    \r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        const $cell = $( this );\r\n        const isTarget = $cell.data( \"target\" );\r\n\r\n        if ( !isTarget )\r\n            return;\r\n\r\n        const row = +$cell.data( \"row-num\" );\r\n        const col = +$cell.data( \"col-num\" );\r\n        const isHighestScoring = $cell.data(\"is-highest-scoring-move\");\r\n\r\n        const [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n       // console.log(`row ${row} col ${col}`);\r\n        // calculate points and set cell values\r\n        const hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber, gameBoard );\r\n       // console.log(\"HITS: \", hits);\r\n\r\n        const pointsEarned = hits.length;\r\n\r\n        if ( pointsEarned === 0 )\r\n            return;\r\n\r\n        const move = new Move( row, col, pointsEarned, activePlayerNumber, isHighestScoring );\r\n        gameBoard.moves.push( move );\r\n\r\n\r\n        hits.forEach(  h =>  h.player = activePlayerNumber );\r\n\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        const potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        const highestScoringNextMove = potentialNextMoves.sort( ( c1, c2 ) => {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[ 0 ];\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        console.log(\"Rendering gameboard\");\r\n        renderGameBoard();\r\n\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings( gameBoard );\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    // Move to Gameboard.get\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        const flatGamBoard = _boardManager.getFlatGameBoard( gameBoard );\r\n        flatGamBoard.forEach( ( cell ) => {\r\n            cell.isTarget = false;\r\n        } );\r\n        const activePlayerCells = flatGamBoard\r\n            .filter( cell =>  cell.player === _activePlayer.number );\r\n\r\n        var potentialNextMoves = [];\r\n        activePlayerCells.forEach( c => {\r\n            const above = _boardManager.tryGetCell( c.row, c.col - 1, gameBoard );\r\n            scoreMove( above, potentialNextMoves );\r\n            const aboveRight = _boardManager.tryGetCell( c.row + 1, c.col - 1, gameBoard );\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n            const aboveLeft = _boardManager.tryGetCell( c.row - 1, c.col - 1, gameBoard );\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n            const left = _boardManager.tryGetCell( c.row - 1, c.col, gameBoard );\r\n            scoreMove( left, potentialNextMoves );\r\n            const right = _boardManager.tryGetCell( c.row + 1, c.col, gameBoard );\r\n            scoreMove( right, potentialNextMoves );\r\n            const below = _boardManager.tryGetCell( c.row, c.col + 1, gameBoard );\r\n            scoreMove( below, potentialNextMoves );\r\n            const belowRight = _boardManager.tryGetCell( c.row + 1, c.col + 1, gameBoard );\r\n            scoreMove( belowRight, potentialNextMoves );\r\n            const belowLeft = _boardManager.tryGetCell( c.row - 1, c.col + 1, gameBoard );\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        const [x,  otherPlayerNumber ] = getPlayerNumbers();\r\n        const hits = _scoreKeeper.setScoreForMove( cell.row, cell.col, otherPlayerNumber, gameBoard );\r\n        const points = hits.length;\r\n        const isHit = cell.player === 0 && points > 0;\r\n        return [ isHit, points ];\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        if ( move === null ) return;\r\n        const [isHit, points] = moveEarnsPoints( move ); \r\n        if ( isHit ) {\r\n            move.isTarget = true;\r\n            move.pointValue = points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        const playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            const $playerSoreBoard = $( \".player-\" + player.number );\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number, gameBoard );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        const otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n})();\r\n"],"sourceRoot":"/source/"}