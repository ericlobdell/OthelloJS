{"version":3,"sources":["BoardManager.js","Cell.js","Gameboard.js","Move.js","Player.js","Repository.js","ScoreKeeper.js","othello.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","BoardManager","this","value","x","y","gameBoard","isValidMove","rows","Array","concat","apply","getFlatGameBoard","filter","c","player","Gameboard","initialPlayer","cellIsTarget","row","col","rowNum","colNum","j","push","Cell","isTarget","players","moves","Move","points","playerId","isHighestScoring","pointValue","time","timeInMatch","highestScoring","Player","num","number","score","Repository","snapshots","data","snapshot","getSnapshotPattern","console","log","snapShots","gameboard","reduce","pattern","move","wasHighestScoring","ScoreKeeper","boardManager","playerNumber","self","getEmptyCells","forEach","cell","setScoreForMove","hits","searchAt","rowInc","colInc","getScore","_x","_x2","_again","r","result","undefined","tryGetCell","checkCell","isEmpty","isPoint","cells","valid","empty","point","calculatePoints","_slicedToArray","sliceIterator","arr","_arr","_n","_d","_e","_s","_i","Symbol","iterator","next","done","err","isArray","getPotentialNextMovesForNextPlayer","flatGamBoard","_boardManager","activePlayerCells","_activePlayer","potentialNextMoves","above","scoreMove","aboveRight","aboveLeft","left","right","below","belowRight","belowLeft","moveEarnsPoints","_getPlayerNumbers3","getPlayerNumbers","_getPlayerNumbers32","otherPlayerNumber","_scoreKeeper","isHit","_moveEarnsPoints","_moveEarnsPoints2","indexOf","updateActivePlayer","newPlayerNumber","playerIndex","_players","updateScoreBoards","$playerSoreBoard","$","getScoreForPlayer","html","addClass","removeClass","otherPlayerIndex","_playerOne","_playerTwo","getInitialGameboard","renderGameBoard","on","$cell","cellObj","_getPlayerNumbers","_getPlayerNumbers2","activePlayerNumber","pointsEarned","h","highestScoringNextMove","sort","c1","c2","resetMoveScoreRatings"],"mappings":"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","file":"app.js","sourcesContent":["\r\nclass BoardManager {\r\n\r\n    tryGetCell( x, y, gameBoard ) {\r\n        return this.isValidMove( x, y ) ?\r\n            gameBoard.rows[y][x] :\r\n            null;\r\n    }\r\n\r\n    isValidMove( x, y ) {\r\n        return ( x > -1 && y > -1 ) && ( x < 8 && y < 8 );\r\n    }\r\n\r\n    getFlatGameBoard( gameBoard ) {\r\n        return Array.prototype.concat.apply( [], gameBoard.rows );\r\n    }\r\n\r\n    getEmptyCells( gameBoard ) {\r\n        return this.getFlatGameBoard( gameBoard )\r\n            .filter( c  => c.player === 0 );\r\n    }\r\n\r\n    getInitialGameboard() {\r\n        let gameBoard = new Gameboard();\r\n\r\n        let initialPlayer = ( x, y ) => {\r\n\r\n            if ( ( x === 3 && y === 3 ) || ( x === 4 && y === 4 ) )\r\n                return 1;\r\n\r\n            if ( ( x === 3 && y === 4 ) || ( x === 4 && y === 3 ) )\r\n                return 2;\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n        let cellIsTarget = ( row, col ) => {\r\n            return ( row === 2 && col === 4 ) ||\r\n            ( row === 3 && col === 5 ) ||\r\n            ( row === 4 && col === 2 ) ||\r\n            ( row === 5 && col === 3 );\r\n        }\r\n\r\n        const rowNum = 8;\r\n        const colNum = 8;\r\n\r\n        for ( let i = 0; i < rowNum; i++ ) {\r\n            let row = [];\r\n\r\n            for ( let j = 0; j < colNum; j++ )\r\n                row.push( new Cell( i, j, initialPlayer( i, j ), cellIsTarget( i, j ) ) );\r\n\r\n            gameBoard.rows.push( row );\r\n        }\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n\r\n\r\n}\r\n","\r\nclass Cell {\r\n\r\n    constructor( row, col, player, isTarget ) {\r\n        this.row = row;\r\n        this.col = col;\r\n        this.player = player;\r\n        this.isTarget = isTarget;\r\n    }\r\n}","class Gameboard {\r\n\r\n    constructor(players) {\r\n        this.rows = [];\r\n        this.moves = [];\r\n        this.players = players;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}","class Move {\r\n\r\n    constructor( row, col, points, playerId, isHighestScoring ) {\r\n        this.x = col;\r\n        this.y = row;\r\n        this.pointValue = points;\r\n        this.player = playerId;\r\n        this.time = 0;\r\n        this.timeInMatch = 0;\r\n        this.highestScoring = isHighestScoring;\r\n    }\r\n}","\r\nclass Player {\r\n\r\n    constructor( num ) {\r\n        this.number = num;\r\n        this.score = 2;\r\n        this.moves = [];\r\n    }\r\n}","class Repository {\r\n    \r\n    constructor() {\r\n        this.snapshots = [];\r\n    }\r\n\r\n    recordMove( data ) {\r\n        let snapshot = this.getSnapshotPattern( data.gameBoard );\r\n        console.log( \"Snapshot created: \", snapshot );\r\n\r\n        this.snapshots.push( snapshot );\r\n        data.snapShots = this.snapshots;\r\n        console.log( \"Saving Data: \", data );\r\n    }\r\n\r\n    getSnapshotPattern( gameboard ) {\r\n        return gameboard.moves.reduce( ( pattern, move ) => {\r\n            return pattern + `${move.x}-${move.y}-${move.player}-${ +move.wasHighestScoring || 0},`;\r\n        }, \"\" );\r\n    }\r\n}\r\n\r\n","\r\nclass ScoreKeeper {\r\n\r\n    constructor( boardManager ) {\r\n        this.boardManager = boardManager;\r\n    }\r\n\r\n    playerHasNextMove( playerNumber, gameBoard ) {\r\n        let self = this;\r\n\r\n        self.boardManager.getEmptyCells( gameBoard ).forEach( (cell)  =>\r\n            self.setScoreForMove( cell.col, cell.row, playerNumber, gameBoard ).length > 0 );\r\n\r\n        return false;\r\n    }\r\n\r\n    setScoreForMove( x, y, player, gameBoard ) {\r\n        let hits = [];\r\n\r\n        for ( let row = -1 ; row <= 1; row++ )\r\n            for ( let col = -1 ; col <= 1; col++ )\r\n                if ( row === 0 && col === 0 )\r\n                    continue;\r\n                else\r\n                    hits = hits.concat( this.searchAt( x, y, row, col, player, gameBoard ));\r\n\r\n        return hits;\r\n    }\r\n\r\n    calculatePoints( cell, rowInc, colInc, player, gameBoard ) {\r\n        let cells = [], self = this;\r\n\r\n        function getScore( r, c ) {\r\n            if ( self.boardManager.tryGetCell( c, r, gameBoard ) === null ) {\r\n                return [];\r\n            }\r\n\r\n            let cell = gameBoard.rows[r][c];\r\n            const result = self.checkCell( cell, player );\r\n            if ( !result.isValidMove || result.isEmpty ) {\r\n                return [];\r\n            } else if ( result.isPoint ) {\r\n                cells.push( cell );\r\n                return getScore( r + rowInc, c + colInc );\r\n            } else {\r\n                return cells;\r\n            }\r\n        }\r\n\r\n        return getScore( cell.row, cell.col );\r\n    }\r\n\r\n    checkCell( cell, player ) {\r\n        const valid = this.boardManager.isValidMove( cell.col, cell.row ),\r\n              empty = valid ? cell.player === 0 : false,\r\n              point = valid ? cell.player !== player && !empty : false;\r\n\r\n        return {\r\n            isValidMove: valid,\r\n            isEmpty: empty,\r\n            isPoint: point\r\n        };\r\n    }\r\n\r\n    getScoreForPlayer( playerNumber, gameBoard ) {\r\n        return this.boardManager.getFlatGameBoard(gameBoard).reduce(( score, cell ) => {\r\n            if (cell.player === playerNumber)\r\n                score++;\r\n\r\n            return score;\r\n        }, 0);\r\n    }\r\n\r\n    resetMoveScoreRatings( gameBoard ) {\r\n        this.boardManager.getFlatGameBoard( gameBoard )\r\n            .forEach( cell  => cell.isHighestScoring = false );\r\n\r\n        return gameBoard;\r\n    }\r\n\r\n    searchAt( x, y, rowInc, colInc, player, gameBoard ) {\r\n        const cell = this.boardManager.tryGetCell( x + colInc, y + rowInc, gameBoard );\r\n        return cell !== null ?\r\n            this.calculatePoints( cell, rowInc, colInc, player, gameBoard ) : [];\r\n    }\r\n\r\n\r\n}\r\n","/// <reference path=\"../../typings/jquery/jquery.d.ts\" />\r\n\r\n(() => {\r\n    const _playerOne = new Player( 1 );\r\n    const _playerTwo = new Player( 2 );\r\n    let _activePlayer = _playerOne;\r\n    const _players = [ _playerOne, _playerTwo ];\r\n    const _boardManager = new BoardManager();\r\n    const gameBoard = _boardManager.getInitialGameboard();\r\n    const _scoreKeeper = new ScoreKeeper( _boardManager );\r\n    \r\n    let renderGameBoard = () => {\r\n        console.log(\"rendering game board\");\r\n        let html = \"\";\r\n        gameBoard.rows.forEach( ( row, i ) => {\r\n            row.forEach( ( cell, j ) => {\r\n                html += `<div class='cell' data-target=\"${cell.isTarget}\" data-is-highest-scoring-move=\"${cell.isHighestScoring}\" data-player-num=\"${cell.player}\" data-row-num='${i}' data-col-num='${j}'>${cell.player}</div>`;\r\n            } );\r\n        } );\r\n\r\n        $( \".game-board\" ).html( html );\r\n    };\r\n    \r\n    $( \".game-board\" ).on( \"click\", \".cell\", function () {\r\n        const $cell = $( this );\r\n        const isTarget = $cell.data( \"target\" );\r\n        if ( !isTarget )\r\n            return;\r\n\r\n        const row = +$cell.data( \"row-num\" );\r\n        const col = +$cell.data( \"col-num\" );\r\n        const isHighestScoring = $cell.data(\"is-highest-scoring-move\");\r\n        const cellObj = gameBoard.rows[ row ][ col ];\r\n        \r\n        const [ activePlayerNumber, otherPlayerNumber ] = getPlayerNumbers();\r\n\r\n        // calculate points and set cell values\r\n        const hits = _scoreKeeper.setScoreForMove( col, row, activePlayerNumber, gameBoard );\r\n        console.log(\"HITS: \", hits);\r\n\r\n        const pointsEarned = hits.length;\r\n        if ( pointsEarned === 0 )\r\n            return;\r\n        const move = new Move( row, col, pointsEarned, activePlayerNumber, isHighestScoring );\r\n        gameBoard.moves.push( move );\r\n\r\n        cellObj.player = activePlayerNumber;\r\n\r\n        hits.forEach( function ( h ) {\r\n            h.player = activePlayerNumber;\r\n        } );\r\n\r\n\r\n        // check if next player has any moves based on board state\r\n        // no, declare victory, else continue\r\n        const potentialNextMoves = getPotentialNextMovesForNextPlayer();\r\n        console.log( \"Potential Next Moves: \", potentialNextMoves );\r\n        const highestScoringNextMove = potentialNextMoves.sort( ( c1, c2 ) => {\r\n            return c2.pointValue - c1.pointValue;\r\n        } )[ 0 ];\r\n        highestScoringNextMove.isHighestScoring = true;\r\n\r\n        updateActivePlayer( otherPlayerNumber );\r\n        renderGameBoard();\r\n        updateScoreBoards( _players );\r\n        _scoreKeeper.resetMoveScoreRatings( gameBoard );\r\n\r\n        if ( potentialNextMoves ) {\r\n            console.log( \"It's now player %d's turn\", otherPlayerNumber );\r\n        } else {\r\n            console.log( \"No next moves for player %d\", otherPlayerNumber );\r\n        }\r\n\r\n\r\n    } );\r\n\r\n    // Move to Gameboard.get\r\n    function getPotentialNextMovesForNextPlayer() {\r\n        const flatGamBoard = _boardManager.getFlatGameBoard( gameBoard );\r\n        flatGamBoard.forEach( ( cell ) => {\r\n            cell.isTarget = false;\r\n        } );\r\n        const activePlayerCells = flatGamBoard\r\n            .filter( ( cell ) => {\r\n                return cell.player === _activePlayer.number;\r\n            } );\r\n        const potentialNextMoves = [];\r\n        activePlayerCells.forEach( c => {\r\n            const above = _boardManager.tryGetCell( c.col, c.row - 1, gameBoard );\r\n            scoreMove( above, potentialNextMoves );\r\n            const aboveRight = _boardManager.tryGetCell( c.col + 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveRight, potentialNextMoves );\r\n            const aboveLeft = _boardManager.tryGetCell( c.col - 1, c.row - 1, gameBoard );\r\n            scoreMove( aboveLeft, potentialNextMoves );\r\n            const left = _boardManager.tryGetCell( c.col - 1, c.row, gameBoard );\r\n            scoreMove( left, potentialNextMoves );\r\n            const right = _boardManager.tryGetCell( c.col + 1, c.row, gameBoard );\r\n            scoreMove( right, potentialNextMoves );\r\n            const below = _boardManager.tryGetCell( c.col, c.row + 1, gameBoard );\r\n            scoreMove( below, potentialNextMoves );\r\n            const belowRight = _boardManager.tryGetCell( c.col + 1, c.row + 1, gameBoard );\r\n            scoreMove( belowRight, potentialNextMoves );\r\n            const belowLeft = _boardManager.tryGetCell( c.col - 1, c.row + 1, gameBoard );\r\n            scoreMove( belowLeft, potentialNextMoves );\r\n        } );\r\n\r\n        return potentialNextMoves;\r\n    }\r\n\r\n    function moveEarnsPoints( cell ) {\r\n        const [x,  otherPlayerNumber ] = getPlayerNumbers();\r\n        const hits = _scoreKeeper.setScoreForMove( cell.col, cell.row, otherPlayerNumber, gameBoard );\r\n        const points = hits.length;\r\n        const isHit = cell.player === 0 && points > 0;\r\n        return [ isHit, points ];\r\n    }\r\n\r\n    function scoreMove( move, potentialNextMoves ) {\r\n        if ( move === null ) return;\r\n        const [isHit, points] = moveEarnsPoints( move ); \r\n        if ( isHit ) {\r\n            move.isTarget = true;\r\n            move.pointValue = points;\r\n\r\n            if ( potentialNextMoves.indexOf( move ) === -1 )\r\n                potentialNextMoves.push( move );\r\n        }\r\n    }\r\n\r\n    function updateActivePlayer( newPlayerNumber ) {\r\n        const playerIndex = newPlayerNumber === 1 ? 0 : 1;\r\n        _activePlayer = _players[ playerIndex ];\r\n    }\r\n\r\n    function updateScoreBoards( players ) {\r\n        players.forEach( function ( player ) {\r\n            const $playerSoreBoard = $( \".player-\" + player.number );\r\n            player.score = _scoreKeeper.getScoreForPlayer( player.number, gameBoard );\r\n\r\n            $( \".player-\" + player.number + \" .score\" ).html( player.score );\r\n            $( \".player-\" + player.number + \" .moves\" ).html( player.moves.length );\r\n\r\n            if ( player.number === _activePlayer.number ) {\r\n                $playerSoreBoard.addClass( \"active\" );\r\n            } else {\r\n                $playerSoreBoard.removeClass( \"active\" );\r\n            }\r\n        } );\r\n    }\r\n\r\n    function getPlayerNumbers() {\r\n        const otherPlayerIndex = _activePlayer.number === 1 ? 1 : 0;\r\n        return [ _activePlayer.number, _players[ otherPlayerIndex ].number ];\r\n    }\r\n\r\n    renderGameBoard();\r\n    updateScoreBoards( _players );\r\n})();\r\n"],"sourceRoot":"/source/"}